classes = {}
for _ in range(int(input())):
    line = input()
    if ':' in line:
        buf = line.split()
        classes[buf[0]] = buf[2:]
    else:
        classes[line] = ['obj']

def isparent(son, par):
    if son not in classes.keys():
        return False
    if son == par:
        return True
    if son == 'obj':
        return False
    if par in classes[son]:
        return True
    for cl in classes[son]:
        if isparent(cl, par):
            return True
    return False

for _ in range(int(input())):
    if isparent(*input().split()[::-1]):
        print('Yes')
    else:
        print('No')

'''
Вам дано описание наследования классов в следующем формате.
<имя класса 1> : <имя класса 2> <имя класса 3> ... <имя класса k>
Это означает, что класс 1 отнаследован от класса 2, класса 3, и
 т. д.

Или эквивалентно записи:

class Class1(Class2, Class3 ... ClassK):
    pass
Формат входных данных
В первой строке входных данных содержится целое число n - число 
лассов.

В следующих n строках содержится описание наследования классов.
 В i-й строке указано от каких классов наследуется i-й класс. 
 Обратите внимание, что класс может ни от кого не наследоваться. 
 Гарантируется, что класс не наследуется сам от себя (прямо 
 или косвенно), что класс не наследуется явно от одного класса 
 более одного раза.

В следующей строке содержится число q - количество запросов.

В следующих q строках содержится описание запросов в формате 
<имя класса 1> <имя класса 2>.
Имя класса – строка, состоящая из символов латинского алфавита,
 длины не более 50.

Формат выходных данных
Для каждого запроса выведите в отдельной строке слово "Yes",
 если класс 1 является предком класса 2, и "No", если не 
 является.
'''